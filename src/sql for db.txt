-- Enable UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Research Analysts (RAs)
-- Core table for managing professional analysts who provide trading advice
CREATE TABLE research_analysts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Use UUID for primary key
    user_id TEXT DEFAULT requesting_user_id(), -- Add user_id column with default value
    full_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    sebi_license_number TEXT NOT NULL UNIQUE, -- Mandatory regulatory requirement
    whatsapp_number TEXT,
    profile_description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_email CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Relationship Managers (RMs)
-- RMs work exclusively with one RA and manage a subset of their clients
CREATE TABLE relationship_managers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Use UUID for primary key
    user_id TEXT DEFAULT requesting_user_id(), -- Add user_id column with default value
    ra_id UUID REFERENCES research_analysts(id),
    full_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    whatsapp_number TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_email CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- End Users (Subscribers)
-- Clients who subscribe to receive trading advice
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Use UUID for primary key
    user_id TEXT DEFAULT requesting_user_id(), -- Add user_id column with default value
    full_name TEXT NOT NULL,
    email TEXT,
    whatsapp_number TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_email CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Subscription Tiers
-- Different service levels offered by RAs
CREATE TABLE subscription_tiers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ra_id UUID REFERENCES research_analysts(id),
    user_id TEXT DEFAULT requesting_user_id(), -- Add user_id column with default value
    name TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    duration_days INTEGER NOT NULL,
    features JSONB, -- Flexible storage for tier-specific features
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(ra_id, name),
    CONSTRAINT positive_price CHECK (price >= 0),
    CONSTRAINT positive_duration CHECK (duration_days > 0)
);

-- User Subscriptions
-- Tracks active and historical subscriptions
CREATE TABLE user_subscriptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    ra_id UUID REFERENCES research_analysts(id),
    tier_id UUID REFERENCES subscription_tiers(id),
    rm_id UUID REFERENCES relationship_managers(id), -- Optional RM assignment
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL,
    payment_info JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_status CHECK (status IN ('active', 'expired', 'cancelled')),
    CONSTRAINT valid_dates CHECK (end_date > start_date)
);



-- Trade Call Templates
-- Stores reusable templates for trade calls and rationales
CREATE TABLE ra_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ra_id UUID REFERENCES research_analysts(id),
    user_id TEXT DEFAULT requesting_user_id(), -- Added for RLS
    template_type TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_template_type CHECK (template_type IN ('call', 'rationale'))
);

-- Trade Calls
-- Core table for storing trading advice and signals
CREATE TABLE trade_calls (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ra_id UUID REFERENCES research_analysts(id),
    user_id TEXT DEFAULT requesting_user_id(), -- Added for RLS
    parent_call_id UUID REFERENCES trade_calls(id), -- For updates/exits
    type TEXT NOT NULL,
    stock_name TEXT NOT NULL,
    ticker_symbol TEXT NOT NULL,
    trade_type TEXT NOT NULL,
    entry_price_lower DECIMAL(10,2),
    entry_price_upper DECIMAL(10,2),
    stop_loss DECIMAL(10,2) NOT NULL,
    target_1 DECIMAL(10,2) NOT NULL,
    target_2 DECIMAL(10,2),
    target_3 DECIMAL(10,2),
    rationale_template_id UUID REFERENCES ra_templates(id),
    custom_rationale TEXT,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_type CHECK (type IN ('BUY', 'SELL', 'UPDATE', 'EXIT')),
    CONSTRAINT valid_trade_type CHECK (trade_type IN ('EQUITY', 'FNO', 'OPTIONS', 'FUTURES')),
    CONSTRAINT valid_status CHECK (status IN ('active', 'updated', 'closed')),
    CONSTRAINT valid_prices CHECK (
        (entry_price_upper IS NULL OR entry_price_upper > entry_price_lower) AND
        (stop_loss > 0) AND
        (target_1 > 0) AND
        (target_2 IS NULL OR target_2 > target_1) AND
        (target_3 IS NULL OR target_3 > target_2)
    )
);

-- Trade Call Distribution
-- Tracks how and when trade calls are distributed to subscribers
CREATE TABLE trade_call_distributions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    trade_call_id UUID REFERENCES trade_calls(id),
    subscription_tier_id UUID REFERENCES subscription_tiers(id),
    user_id TEXT DEFAULT requesting_user_id(), -- Added for RLS
    distributed_at TIMESTAMPTZ DEFAULT NOW(),
    distribution_channel TEXT NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_channel CHECK (distribution_channel IN ('whatsapp', 'telegram', 'twitter')),
    CONSTRAINT valid_status CHECK (status IN ('pending', 'sent', 'failed'))
);

-- Support Queries
-- Manages support conversations between users, RMs, and RAs
CREATE TABLE support_queries (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    ra_id UUID REFERENCES research_analysts(id),
    rm_id UUID REFERENCES relationship_managers(id),
    trade_call_id UUID REFERENCES trade_calls(id),
    query_text TEXT NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_status CHECK (status IN ('open', 'in_progress', 'resolved'))
);

-- Query Messages
-- Individual messages in support conversations
CREATE TABLE query_messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    query_id UUID REFERENCES support_queries(id),
    sender_type TEXT NOT NULL,
    sender_id UUID NOT NULL,
    user_id TEXT DEFAULT requesting_user_id(), -- Added for RLS
    message TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_sender_type CHECK (sender_type IN ('user', 'ra', 'rm'))
);


-- Performance Optimization Indexes for Finora Platform
-- These indexes improve query performance for common operations

-- User Management Indexes
CREATE INDEX idx_ra_email ON research_analysts(email);
CREATE INDEX idx_ra_sebi_number ON research_analysts(sebi_license_number);

CREATE INDEX idx_rm_ra_id ON relationship_managers(ra_id);
CREATE INDEX idx_rm_email ON relationship_managers(email);

CREATE INDEX idx_users_email ON users(email);

-- Subscription Indexes
CREATE INDEX idx_subscription_tiers_ra_id ON subscription_tiers(ra_id);
CREATE INDEX idx_user_subscriptions_user_id ON user_subscriptions(user_id);
CREATE INDEX idx_user_subscriptions_ra_id ON user_subscriptions(ra_id);
CREATE INDEX idx_user_subscriptions_status ON user_subscriptions(status);
CREATE INDEX idx_user_subscriptions_dates ON user_subscriptions(start_date, end_date);

-- Trade Call Indexes
CREATE INDEX idx_trade_calls_ra_id ON trade_calls(ra_id);
CREATE INDEX idx_trade_calls_parent_id ON trade_calls(parent_call_id);
CREATE INDEX idx_trade_calls_ticker ON trade_calls(ticker_symbol);
CREATE INDEX idx_trade_calls_status ON trade_calls(status);
CREATE INDEX idx_trade_calls_created_at ON trade_calls(created_at);

-- Distribution Indexes
CREATE INDEX idx_distributions_trade_call_id ON trade_call_distributions(trade_call_id);
CREATE INDEX idx_distributions_tier_id ON trade_call_distributions(subscription_tier_id);
CREATE INDEX idx_distributions_status ON trade_call_distributions(status);

-- Support Query Indexes
CREATE INDEX idx_support_queries_user_id ON support_queries(user_id);
CREATE INDEX idx_support_queries_ra_id ON support_queries(ra_id);
CREATE INDEX idx_support_queries_status ON support_queries(status);
CREATE INDEX idx_query_messages_query_id ON query_messages(query_id);

-- Composite Indexes for Common Query Patterns
CREATE INDEX idx_active_subscriptions ON user_subscriptions(ra_id, status, end_date)
    WHERE status = 'active';

CREATE INDEX idx_recent_active_calls ON trade_calls(ra_id, status, created_at)
    WHERE status = 'active';

    -- Enable RLS on all tables
ALTER TABLE research_analysts ENABLE ROW LEVEL SECURITY;
ALTER TABLE relationship_managers ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE subscription_tiers ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE trade_calls ENABLE ROW LEVEL SECURITY;
ALTER TABLE trade_call_distributions ENABLE ROW LEVEL SECURITY;
ALTER TABLE support_queries ENABLE ROW LEVEL SECURITY;
ALTER TABLE query_messages ENABLE ROW LEVEL SECURITY;

-- Research Analyst Policies
CREATE POLICY ra_view_own_data ON research_analysts
    FOR SELECT
    TO authenticated
    USING ((id) = (requesting_user_id()::uuid)); 

-- RM Policies
CREATE POLICY rm_view_own_data ON relationship_managers
    FOR SELECT
    TO authenticated
    USING ((id) = (requesting_user_id()::uuid)); 

-- Trade Call Policies
CREATE POLICY ra_manage_calls ON trade_calls
    FOR SELECT
    TO authenticated
    USING ((ra_id) = (requesting_user_id()::uuid)); 

CREATE POLICY rm_view_calls ON trade_calls
    FOR SELECT
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 
            FROM user_subscriptions us
            WHERE us.ra_id = trade_calls.ra_id
            AND us.rm_id = (requesting_user_id()::uuid)
        )
    );

CREATE POLICY user_view_calls ON trade_calls
    FOR SELECT
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 
            FROM user_subscriptions us
            WHERE us.ra_id = trade_calls.ra_id
            AND us.user_id = (requesting_user_id()::uuid)
            AND us.status = 'active'
        )
    );

-- Support Query Policies
CREATE POLICY support_query_access ON support_queries
    FOR SELECT
    TO authenticated
    USING (
        user_id = (requesting_user_id()::uuid)
        OR ra_id = (requesting_user_id()::uuid)
        OR rm_id = (requesting_user_id()::uuid)
    );

-- Query Message Policies
CREATE POLICY message_access ON query_messages
    FOR SELECT
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 
            FROM support_queries sq
            WHERE sq.id = query_messages.query_id
            AND (
                sq.user_id = (requesting_user_id()::uuid)
                OR sq.ra_id = (requesting_user_id()::uuid)
                OR sq.rm_id = (requesting_user_id()::uuid)
            )
        )
    );